#[Name = "Enum Test", ParseResult = true]
enum MyName : i32
{
    myEnumValue1 = 5,
    myEnumValue2,
    myEnumValue3 = 10,
    myENumValue4 = myEnumValue1 + myEnumValue2 + myEnumValue3
}

#[Name = "Struct Test", ParseResult = true]
struct MyStruct
{
    myVariable : i32;
    myConstVariable :: i32 = false;
    myUninitializedVariable : i32 = ---;
    myNullptrVariable : i32 = nullptr;
    myConstPtrVariable :: i32* = nullptr;

    fn MyFunction() -> bool
    {
        return true;
    }
}

#[Name = "Function Test", ParseResult = true]
fn main(player : i32*) -> i32*
{
    test : i32* = nullptr;
    testfail();
    
    if (true) { }
    else if (false) { }
    else { }
    
    test : i32 = ---;
    
    test = 5.5 + 5.5;
    test = 5.5f - 5.5f;
    test = 5.5 * 5.5f;
    test = 5.5f / 5.5;
    test = 5 & 5;
    test = 5u % 5u;
    test = 5 | 5u;
    test = 5u >> 5;
    test = 5 << 5;
    
    test += 5;
    test -= 5.5f;
    test *= 5.5;
    test /= 5;
    test &= 5;
    test %= 5u;
    test |= 5;
    test >>= 5u;
    test <<= 5;

    test = "hi";
    test++;
    test--;
    test = test++;
    test = test--;
    test = test++ + test--;
    test = test-- + test++;
    
    func(1, 1.1, 1.1f, "This is a string", test.func());
    test = func(1, 1.1, 1.1f, "This is a string", func());

    test.member.test().another.test;
    test = test.member.test().another.test;
    test.func(true);
    test = test.func(false);
    test = test.func(false)++;
    test = test.func(false)--;

    if (true)
    {
        break;

        if (true) { }
        else if (false) { }
        else { }
    }
    else { }

    while (true)
    {
        while(false)
        {
            continue;
        }

        break;
    }

    for (; test.member < 1;) 
    {
        test.member += 1;
    }
    for (; 1 < 1; test += 1) 
    { 
        test.function();
    }
    for (test = 5; 2 < 1;) { }
    for (test++; 2 < 1;) { }
    for (test++; 2 < 1; test--) { }
    for (test--; 2 < 1;) { }
    for (test--; 2 < 1; test++) { }
    for (test = 0; test++ < 1;) { }
    for (test = 0; test-- < 1;) { }
    for (test = 5; 2 < 1; test.member += 5) { }
    for (test : i32; 3 < 1;) { }
    for (test : i32; 3 < 1; test.function() += 1) { }
    for (test : i32 = 5; 4 < 1;) { }
    for (test : i32* = 5; 4 < 1; test.function()) { }
    for (test : i32* = 5; 4 < 1; test.member = test.function()) { }
    
    foreach (item in player.items)
    {
        break;
    }

    foreach (index, value in player.items)
    {
        break;
    }

    myTestVar1, myTestVar2 = functionCall();
    myTestVar1, myTestVar2 = [5, 5];

    player.items[0].level += 1;

    return 1;
}